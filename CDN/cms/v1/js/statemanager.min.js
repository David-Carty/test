"use strict";
var statehistory = {}
var statehistoryPos = {}
var state = {}
const s_appState = function () {


    function privateMethod() {
        return "Amelie"
    }

    /* Public Methods */
    return {
        store: function (v) {
            const cb = [];
            function value(c) {
                if (arguments.length) cb.map(f => { f && f(v = c); });
                return v;
            }
            value.on = c => {
                const i = cb.push(c) - 1;
                return () => { cb[i] = 0; };
            };

            return value;
        },
        create: function (storeName, val = {}, history = false) {
            /* state["view_componentId"] = store() 
            if no value is set then the default value will be an empty object*/
            state[storeName] = this.store(val)
            if (history) {
                statehistory[storeName] = [val]
                statehistoryPos[storeName] = 0
            }
        },
        destroy: function (storeName) {
            state[storeName] = {}
            statehistory[storeName] = {}
            statehistoryPos[storeName] = {};
        },
        subscribe: function (storeName, callback) {
            /* appState.subscribe('num', function(val) {
                console.log('The value of my store(' + storeName + ') is ' + val);
            }); */
            //alert("here")
            return state[storeName].subscribe = state[storeName].on(v => callback(v))

        },
        unsubscribe: function (storeName) {
            state[storeName].subscribe()
        },
        setVal: function (storeName, val) {
            if (statehistory[storeName]) {
                statehistory[storeName].push(val)
            }
            state[storeName](val)
        },
        getVal: function (storeName) {
            if (state[storeName].length > 0) {
                return state[storeName]()
            }
        },
        getValString: function (storeName) {
            if (state[storeName].length > 0) {
                return JSON.stringify(state[storeName]())
            }
        },
        getHistory: function (storeName) {
            return statehistory[storeName]
        },
        prevHistory: function (storeName) {
            if (statehistoryPos[storeName] < 1) { statehistoryPos[storeName] = 0 } else { statehistoryPos[storeName] -= 1 }
            return statehistory[storeName][statehistoryPos[storeName]]
        },
        nextHistory: function (storeName) {
            let historyLen = statehistory[storeName].length
            if (statehistoryPos[storeName] + 1 === historyLen) { statehistoryPos[storeName] = historyLen - 1 } else { statehistoryPos[storeName] += 1 }
            return statehistory[storeName][statehistoryPos[storeName]]

        },
        clearHistory: function (storeName) {

            statehistory[storeName] = []
            statehistoryPos[storeName] = 0;
        },

    };
}

/*const appState = new AppState();
appState.create("num", { "name": "David" }, true)

console.log(appState.getVal("num"))
console.log("Stringyfy =" + appState.getValString("num"))

appState.subscribe("num", function (val) {
    console.log('The value of my store is ' + val)
});

appState.setVal("num", "560")
appState.setVal("num", "570")
console.log("stateHistory=" + appState.getHistory("num"))
console.log("prevHistory=" + appState.prevHistory("num"))
console.log("nextHistory=" + appState.destroy("num"))
console.log("Stringyfy =" + appState.getValString("num"))
console.log("nextHistory=" + appState.nextHistory("num"))
console.log("stateHistory=" + JSON.stringify(appState.getHistory("num")))*/





