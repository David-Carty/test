"use strict";

const _s_name = "home";
const _s_obj = function (p_params) {
  let params = {
    id: null
  };

  params = s_utils.params(params, p_params)

  /* Private Variables */

  //const _compEl = document.getElementById(params.id)
  // let _parentEl = _compEl.parentElement();

  /*start17752hidden*/
  let _97156_ComponentsHTML = ""; /* stores the components HTML when load is called. */
  const _loadDependencies = () => {
    /*Called before init see design.hnd/Architecture/Application/Handling HTML.  Does not call any other functions in the component, all its functionality is either in this function or it can call utility functions.  Created based on user design settings.  Usecase: load dependencies.*/
  }
  const _reinit = (parameters) => {
    /* Reinitialises a component in 4 simple steps. */
    params = s_utils.params(parameters, params)
    _unregisterEvents()
    s_utils.insertComponent(_parentEl, params.id);
    _init()
  }


  /*end17752hidden*/

  const _registerEvents = () => {

  }

  const _unregister = () => {
    /*Needs to unregister each component by calling the components _unregister method which calls the 
    components private method unregister.  The components private unregister is editable by the developer
    who must ensure that all events are unregistered as well as state listeners and any data objects associated with the components. As the runtime is developed we must also destroy any data that is associated with the view itself. */
    /* The outer never gets unloaded in a single page app. */
    /*
    1. Call the unregister event of each component.
    2. Views do not have events are state associated with them they are just simple containers.
    
    */
  }



  /* Public Methods */
  return {
    init: function () {
      //alert("Home is initialised")
      _registerEvents()
      //_createDragBox()
    },
    getAge: function (Name, Age) {
      alert(Name + " yor age is " + Age + ".")
    },
    /* Beforeload and beforeunload are not required as they can be handled by the preprocess that calls init.  Also afterUnload is not required as the state manager handles unloaded components and can emit the fact to any listener.  _load, reinit and unload are all systems functions.  Hiding them prevents the users from messing internal processes up.  */
    /*start17752hidden*/
    _loadDependencies: function () {
      _loadDependencies();
    },
    _reinit: function () {
      _reinit();
    },
    _unregisterView: function () {
      _unregister()
    },
    /*end17752hidden*/
  }


}

s_rt._loadView(_s_name, _s_obj);
