/*This is the component pattern that is stored in an array of objects and identified by its name. The HTML of the view is also stored as this is required for reinitialisation. The name must match the physical filename of the component.  Views and components follow the same format for consistency. */

"use strict";

s_rt._loadView("home", function (p_params) {
    let params = {
        id: null
    };

    params = s_utils.params(params, p_params)

    /* Private Variables */

    const _compEl = document.getElementById(params.id)
    //let _parentEl = _compEl.parentElement();

    /*start17752hidden*/
    let _97156_ComponentsHTML = ""; /* stores the components HTML when load is called. */
    const _loadDependencies = () => {
        /*Called before init see design.hnd/Architecture/Application/Handling HTML.  Does not call any other functions in the component, all its functionality is either in this function or it can call utility functions.  Created based on user design settings.  Usecase: load dependencies.*/
    }
    const _reinit = (parameters) => {
        /* Reinitialises a component in 4 simple steps. */
        params = s_utils.params(parameters, params)
        _unregisterEvents()
        s_utils.insertComponent(_parentEl, params.id);
        _init()
    }


    /*end17752hidden*/

    const _registerEvents = () => {
        // console.log("home loaded")
    }

    const _unregisterEvents = () => {
        /* Needs to be editable as events are all unique to each component. Generally only required in views, components, libs (usually call libs destroy method). The outer never get unloaded in a single page app. */
    }



    /* Public Methods */
    return {
        init: function () {
            // console.log("Home is initialised")
            _registerEvents()
            //_createDragBox()
        },
        unLoad: function (callbackFn) {
            //  console.log("unload home")
            callbackFn(true)
        },
        getAge: function (Name, Age) {
            alert(Name + " yor age is " + Age + ".")
        },
        /* Beforeload and beforeunload are not required as they can be handled by the preprocess that calls init.  Also afterUnload is not required as the state manager handles unloaded components and can emit the fact to any listener.  _load, reinit and unload are all systems functions.  Hiding them prevents the users from messing internal processes up.  */
        /*start17752hidden*/
        _loadDependencies: function () {
            _loadDependencies();
        },
        _reinit: function () {
            _reinit();
        },
        _unregisterEvents: function () {
            _unregisterEvents()
        },
        /*end17752hidden*/
    }

})




