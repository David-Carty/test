'use strict';

/*
There is only two places that a component should get initialises, that is either
in the app if it's html appears in the app or in a view using:

const vViewName = new v_ViewName ('Bjorn', 1,'axe'); 
components are used to create instances so they are never self inistiating.

*/

/* start-bab-gen-code911 */
var babgeneratedcode911;
/* end-bab-gen-code911 */

class v_home {
  // ..and an (optional) custom class constructor. If one is
  // not supplied, a default constructor is used instead:
  // constructor() { }
  constructor() {
    this.parentEl
  }
  
/* variables */



  /* Private */
 
	_addEvents () {
  
   
  }
 
  /* End Private */

  
/* Public */
  init() {
      /*This loads and initialises the components. Components should not be
      directly referenced outside of a view.  Instead use the views methods
      to manipulate the components. */

console.log("home page has loaded!!!");
      //https://stackoverflow.com/questions/22528967/es6-class-variable-alternatives

/* components should be stored in: MyClass.c_MenuBar = new ; */
this._addEvents();
    console.log( "A view with the id: " + this.id + '.' + "has been initialised!");
  }

/* we can still subscribe to redux without breaking this model */

  actions(params){
  /* params are passed in either from the router in which case they appear in history
  otherwise they are passed in directly.  The params value is an object in the format 
  {"action": "moveto", "page":"5"}.  params.action="move", params.page="5" or
  {"action": "moveNext", "current":"2", "name":"jo*"}
  */

  if(params==null){
    //Maybe reset the view to its default status
  }else{

  switch(params.action) { 
    case "moveto": { 
       console.log("Maybe call method moveto(params.page)"); 
       break; 
    } 
    case "moveNext": { 
       console.log("Maybe call method moveNext(params.current)"); 
       break; 
    }
    case "moveBack": { 
       console.log("Maybe call method moveBack(params.current)"); 
       break;    
    } 
 }
}

  }

  unload() {
    /* Execute any code that is required prior to removing the component */;
    /*returns true or false.  If false then the view does not get unloaded. */
    console.log("******** unloadHome **********");
  }
  
/* End Public */

}

